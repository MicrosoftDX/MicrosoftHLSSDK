<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!-- Used by the project to display user-friendly errors when the targets file is missing  -->
    <ApplicationInsightsImported>true</ApplicationInsightsImported>
  </PropertyGroup>
  
  <Target Name="CreateApplicationInsightsConfigItemsForIncrementalBuild">
    <ItemGroup>
      <OriginalApplicationInsightsConfig Include="@(None);@(Content)" Condition="'%(FileName)%(Extension)' == 'ApplicationInsights.config'" />
      <_IntermediateApplicationInsightsConfig Include="@(OriginalApplicationInsightsConfig->'$(IntermediateOutputPath)%(FileName)%(Extension)')" />
      <IntermediateApplicationInsightsConfig Include="@(_IntermediateApplicationInsightsConfig->'%(FullPath)')" />
    </ItemGroup>
  </Target>

  <Target Name="PrepareIntermediateApplicationInsightsConfig"
          DependsOnTargets="CreateApplicationInsightsConfigItemsForIncrementalBuild"
          Inputs="@(OriginalApplicationInsightsConfig)"
          Outputs="@(IntermediateApplicationInsightsConfig)">
    
    <!-- Copy original ApplicaitonInsights.config to the intermediate directory -->
    <Copy SourceFiles="@(OriginalApplicationInsightsConfig)" DestinationFiles="@(IntermediateApplicationInsightsConfig)" />

    <!-- Register intermediate config file for removal by the Clean target -->
    <ItemGroup>
      <FileWrites Include="@(IntermediateApplicationInsightsConfig)" />
    </ItemGroup>

    <!-- Enable DeveloperMode when building in Visual Studio in Debug configuration -->
    <EnableDeveloperMode ConfigurationFile="@(IntermediateApplicationInsightsConfig)"
                         Condition="'$(BuildingInsideVisualStudio)' == 'true' and '$(Configuration)' == 'Debug'" />
  </Target>

  <Target Name="CopyApplicationInsightsConfigToOutputDirectory" 
          BeforeTargets="GetCopyToOutputDirectoryItems" 
          DependsOnTargets="PrepareIntermediateApplicationInsightsConfig">
    <ItemGroup>
      <!-- Remove the existing ContentWithTargetPath item of the original ApplicationInsights.config to prevent collision with the intermediate one we need to copy to output directory -->
      <ContentWithTargetPath Remove="@(OriginalApplicationInsightsConfig)" />

      <!-- Create a ContentWithTargetPath item to make sure the intermediate ApplicationInsights.config gets copied to the output directory by Microsoft.Common.CurrentVersion.targets -->
      <ContentWithTargetPath Include="@(IntermediateApplicationInsightsConfig)">
        <TargetPath>%(FileName)%(Extension)</TargetPath>
        <!-- Always overwrite output copy with intermediate to guarantee that switching configurations updates output copy correctly -->
        <CopyToOutputDirectory>Always</CopyToOutputDirectory>
      </ContentWithTargetPath>
    </ItemGroup>
  </Target>

  <Target Name="PackageApplicationInsightsConfig" 
          BeforeTargets="ContentFilesProjectOutputGroup" 
          DependsOnTargets="PrepareIntermediateApplicationInsightsConfig">
    <!-- Create a ContentFilesProjectOutputGroupOutput item to make sure intermediate ApplicationInsights.config gets included in the AppX package by Microsoft.AppXPackage.targets -->
    <ItemGroup>
      <ContentFilesProjectOutputGroupOutput Include="@(IntermediateApplicationInsightsConfig)">
        <TargetPath>%(FileName)%(Extension)</TargetPath>
      </ContentFilesProjectOutputGroupOutput>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <!-- In Visual Studio 2012 and 2013 the Microsoft.Build.Tasks assembly includes version number in its name -->
    <MSBuildTasksAssembly Condition="Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MSBuildTasksAssembly>
    <!-- In Visual Studio 2015 the Microsoft.Build.Tasks assembly includes Core in its name -->
    <MSBuildTasksAssembly Condition="Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MSBuildTasksAssembly>
  </PropertyGroup>
  
  <UsingTask TaskName="EnableDeveloperMode" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildTasksAssembly)">
    <ParameterGroup>
      <ConfigurationFile ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System" />
      <Using Namespace="System.Xml.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            XNamespace xmlns = "http://schemas.microsoft.com/ApplicationInsights/2013/Settings";
            XDocument document = XDocument.Load(this.ConfigurationFile);

            XName elementName = xmlns + "TelemetryChannel";
            XElement telemetryChannel = document.Root.Element(elementName);
            if (telemetryChannel == null)
            {
                telemetryChannel = new XElement(elementName, new XAttribute("Type", "Microsoft.ApplicationInsights.Channel.InMemoryChannel, Microsoft.ApplicationInsights"));                
                document.Root.Add(telemetryChannel);                
            }

            elementName = xmlns + "DeveloperMode";
            XElement developerMode = telemetryChannel.Element(elementName);
            if (developerMode == null)
            {
                developerMode = new XElement(elementName);
                telemetryChannel.Add(developerMode);
                developerMode.Value = "true";
                document.Save(this.ConfigurationFile);
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
